package com.dirolep.Aspect;import com.dirolep.Utils.IPUtils;import lombok.extern.slf4j.Slf4j;import org.aspectj.lang.JoinPoint;import org.aspectj.lang.ProceedingJoinPoint;import org.aspectj.lang.annotation.*;import org.springframework.stereotype.Component;import org.springframework.web.context.request.RequestContextHolder;import org.springframework.web.context.request.ServletRequestAttributes;import javax.servlet.http.HttpServletRequest;import java.util.Arrays;/** * * Created by xieyao on 2018/8/7. */@Aspect@Component@Slf4jpublic class LogAspect {    @Pointcut("execution( * com.dirolep.Controller.*.*(..))")//两个..代表所有子目录，最后括号里的两个..代表所有参数    public void logPointCut() {    }    @Before("logPointCut()")    public void doBefore(JoinPoint joinPoint) throws Throwable {        // 接收到请求，记录请求内容        ServletRequestAttributes attributes = (ServletRequestAttributes) RequestContextHolder.getRequestAttributes();        HttpServletRequest request = attributes.getRequest();        // 记录下请求内容        log.info("1. 请求地址 : " + request.getRequestURL().toString());        log.info("2. HTTP METHOD : " + request.getMethod());        log.info("3. IP : " + IPUtils.getIpAddr(request));        log.info("4. CLASS_METHOD : " + joinPoint.getSignature().getDeclaringTypeName() + "." + joinPoint.getSignature().getName());        log.info("5. 参数 : " + Arrays.toString(joinPoint.getArgs()));    }    @AfterReturning(returning = "ret", pointcut = "logPointCut()")// returning的值和doAfterReturning的参数名一致    public void doAfterReturning(Object ret) throws Throwable {        // 处理完请求，返回内容(返回值太复杂时，打印的是物理存储空间的地址)        log.debug("返回值 : " + ret);    }    @Around("logPointCut()")    public Object doAround(ProceedingJoinPoint pjp) throws Throwable {        long startTime = System.currentTimeMillis();        Object ob = pjp.proceed();// ob 为方法的返回值        log.info("6. 耗时 : " + (System.currentTimeMillis() - startTime));        return ob;    }}